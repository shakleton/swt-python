static ccv_nnc_cmd_init_t init_map[] = {<% init_map.each do |init| %>
	{.name = "<%= init[:name] %>", .cmd = 0x<%= init[:cmd] %>},<% end %>
};

static ccv_nnc_cmd_backend_init_t backend_init_map[] = {<% backend_init_map.each do |init| %>
	{.name = "<%= init[:name] %>", .backend = 0x<%= init[:backend] %>},<% end %>
};

static inline int _ccv_nnc_cmd_ph(const uint32_t cmd)
{
	switch ((cmd >> <%= command_chd[:top_level_params][:idx] + 1 %>) % <%= command_chd[:top_level_params][:n] %>)
	{<% command_chd[:bucket_params].each_with_index do |bucket_params, i| %>
		case <%= i %>:<% if i == command_chd[:bucket_params].count - 1 %>
		default:<% end %>
			return ((((cmd >> <%= bucket_params[:idx] + 1 %>) % <%= bucket_params[:n] %>) + <%= bucket_params[:off] %>) << 1) | (cmd & 1);<% end %>
	}
}

static inline int _ccv_nnc_cmd_backend_ph(const uint32_t backend)
{
	switch ((backend >> <%= backend_chd[:top_level_params][:idx] %>) % <%= backend_chd[:top_level_params][:n] %>)
	{<% backend_chd[:bucket_params].each_with_index do |bucket_params, i| %>
		case <%= i %>:<% if i == backend_chd[:bucket_params].count - 1 %>
		default:<% end %>
			return ((backend >> <%= bucket_params[:idx] %>) % <%= bucket_params[:n] %>) + <%= bucket_params[:off] %>;<% end %>
	}
}

<% init_map.each do |init| %>void _register_command_<%= init[:name] %>(ccv_nnc_cmd_registry_t* const registry);
<% end %>
<% command_backends.reject(&:cuda?).each do |command_backend| %>void _register_command_<%= command_backend.command %>_backend_<%= command_backend.backend %>(ccv_nnc_cmd_backend_registry_t* const registry);
<% end %>#ifdef HAVE_CUDA
<% command_backends.select(&:cuda?).each do |command_backend| %>void _register_command_<%= command_backend.command %>_backend_<%= command_backend.backend %>(ccv_nnc_cmd_backend_registry_t* const registry);
<% end %>#endif

static inline void _ccv_nnc_cmd_init(void)
{<% init_map.each_with_index do |init, i| %>
	_register_command_<%= init[:name] %>(&init_map[<%= i%>].registry);<% end %>
<% command_backends.reject(&:cuda?).each do |command_backend| %>
	_register_command_<%= command_backend.command %>_backend_<%= command_backend.backend %>(&(init_map[<%= command_idx[command_backend.command] %>].backends[<%= backend_idx[command_backend.backend] %>]));<% end %>
#ifdef HAVE_CUDA<% command_backends.select(&:cuda?).each do |command_backend| %>
	_register_command_<%= command_backend.command %>_backend_<%= command_backend.backend %>(&(init_map[<%= command_idx[command_backend.command] %>].backends[<%= backend_idx[command_backend.backend] %>]));<% end %>
#endif
}
